import os
import openai

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    print("\u274c OPENAI_API_KEY environment variable not set. Skipping audit.")
    raise SystemExit(1)

openai.api_key = api_key

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø—É
FILE_EXTENSIONS = (".py", ".js")

def audit_code(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            code = f.read()
        if not code.strip():
            return

        print(f"\nüîç –ê–Ω–∞–ª–∏–∑: {path}")

        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –Ω–∏–∂–µ. –ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏, –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º, –ø–ª–æ—Ö–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n```python\n{code}\n```"}
            ],
            temperature=0,
            max_tokens=1024
        )

        print(response.choices[0].message.content)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {path}: {e}")

def scan_directory(root="."):
    for dirpath, _, filenames in os.walk(root):
        for filename in filenames:
            if filename.endswith(FILE_EXTENSIONS):
                audit_code(os.path.join(dirpath, filename))

if __name__ == "__main__":
    scan_directory("ferumdub")
